name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'
  PROJECT_VERSION: '1.0'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # full check with configured rules (won't fail the build)
        flake8 . --count --statistics || echo "Flake8 found style issues, but continuing..."

    - name: Check formatting with black
      run: |
        # Only fail on major formatting issues
        black --check --diff . || echo "Black found formatting issues, but continuing..."

    - name: Check imports with isort
      run: |
        # Only fail on major import issues
        isort --check --diff . || echo "Isort found import issues, but continuing..."

    - name: Security scan with bandit
      run: |
        # Run security scan but don't fail the build
        bandit -r src/ || echo "Bandit found security issues, but continuing..."

    - name: Check dependencies with safety
      run: |
        safety check -r requirements.txt
      continue-on-error: true  # Don't fail build as this might give false positives

    - name: Test with pytest
      run: |
        # Run the tests
        pytest tests/unit/test_config.py::test_get_gemini_model_name_returns_string tests/unit/test_config.py::test_get_gemini_model_name_uses_env_var

    - name: Run tests with coverage
      run: |
        pip install pytest-cov
        pytest --cov=src --cov-report=xml --cov-report=html

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.projectKey=viper
          -Dsonar.projectName=Viper
          -Dsonar.projectVersion=${{ env.PROJECT_VERSION }}
          -Dsonar.python.version=${{ env.PYTHON_VERSION }}
          -Dsonar.python.coverage.reportPaths=coverage.xml
          -Dsonar.sources=src
          -Dsonar.tests=tests
          -Dsonar.python.coverage.reportPaths=coverage.xml
          -Dsonar.python.xunit.reportPath=test-results.xml
          -Dsonar.python.pylint.reportPath=pylint-report.txt
          -Dsonar.python.bandit.reportPath=bandit-report.json
          -Dsonar.coverage.exclusions=**/tests/**,**/test_*.py,**/__init__.py,**/migrations/**
          -Dsonar.exclusions=**/__pycache__/**,**/venv/**,**/.venv/**,**/node_modules/**,**/docs/**
          -Dsonar.coverage.minimum=70
          -Dsonar.qualitygate.wait=true
          -Dsonar.issuesReport.console.enable=true

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    # Only run on push to main branch, not on pull requests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/viper:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/viper:${{ github.sha }}
