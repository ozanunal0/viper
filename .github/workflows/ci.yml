# GitHub Actions İş Akışı Adı
name: Python CI/CD Pipeline

# Bu iş akışının ne zaman tetikleneceğini belirler
on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

# İş akışı genelinde kullanılacak ortam değişkenleri
env:
  PYTHON_VERSION: '3.9'
  PROJECT_VERSION: '1.0'

# İş akışında çalışacak işler (jobs)
jobs:
  # 'test' adında bir iş
  test:
    # İşin çalışacağı sanal makine
    runs-on: ubuntu-latest

    # İş adımları
    steps:
    # 1. Adım: Kod deposunu (repository) klonla
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Tüm git geçmişini çeker (SonarQube için gerekli)

    # 2. Adım: Python ortamını kur
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # 3. Adım: Bağımlılıkları yükle
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    # 4. Adım: Flake8 ile kod stili kontrolü (linting)
    - name: Lint with flake8
      run: |
        # Python sözdizimi hataları veya tanımsız değişkenler varsa build'i durdur
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Yapılandırılmış kurallarla tam kontrol (build'i durdurmaz)
        flake8 . --count --statistics || echo "Flake8 stil sorunları buldu, ancak devam ediliyor..."

    # 5. Adım: Black ile kod formatını kontrol et
    - name: Check formatting with black
      run: |
        black --check --diff . || echo "Black formatlama sorunları buldu, ancak devam ediliyor..."

    # 6. Adım: isort ile import sıralamasını kontrol et
    - name: Check imports with isort
      run: |
        isort --check --diff . || echo "Isort import sıralama sorunları buldu, ancak devam ediliyor..."

    # 7. Adım: Bandit ile güvenlik taraması yap
    - name: Security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || echo "Bandit güvenlik açıkları buldu, ancak devam ediliyor..."

    # 8. Adım: Safety ile bağımlılıkları kontrol et
    - name: Check dependencies with safety
      run: |
        safety check -r requirements.txt
      continue-on-error: true

    # 9. Adım: Pylint ile kod analizi yap
    - name: Run pylint analysis
      run: |
        pip install pylint
        pylint src/ --output=pylint-report.txt --reports=y || echo "Pylint sorunlar buldu, ancak devam ediliyor..."
      continue-on-error: true
      
    # 10. Adım: Belirli Pytest testlerini çalıştır
    - name: Test with pytest
      run: |
        # Belirtilen testleri çalıştır
        pytest tests/unit/test_config.py::test_get_gemini_model_name_returns_string tests/unit/test_config.py::test_get_gemini_model_name_uses_env_var

    # 11. Adım: Kod kapsamı (coverage) ile testleri çalıştır ve rapor oluştur
    - name: Run tests with coverage
      run: |
        pip install pytest-cov
        pytest --cov=src --cov-report=xml --cov-report=html --junitxml=test-results.xml

    # 12. Adım: SonarQube ile kod kalitesi taraması
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.projectKey=ozanunal0_viper
          -Dsonar.projectName=viper
          -Dsonar.projectVersion=${{ env.PROJECT_VERSION }}
          -Dsonar.python.version=${{ env.PYTHON_VERSION }}
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.sources=src
          -Dsonar.tests=tests
          -Dsonar.python.coverage.reportPaths=coverage.xml
          -Dsonar.python.xunit.reportPath=test-results.xml
          -Dsonar.python.pylint.reportPath=pylint-report.txt
          -Dsonar.python.bandit.reportPath=bandit-report.json
          -Dsonar.coverage.exclusions=**/tests/**,**/test_*.py,**/__init__.py,**/migrations/**
          -Dsonar.exclusions=**/__pycache__/**,**/venv/**,**/.venv/**,**/node_modules/**,**/docs/**
          -Dsonar.coverage.minimum=70
          -Dsonar.qualitygate.wait=true
          -Dsonar.issuesReport.console.enable=true

    # 13. Adım: Kapsam raporlarını Codecov'a yükle
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  # 'build-and-push' adında ikinci bir iş
  build-and-push:
    # Bu işin başlaması için 'test' işinin başarıyla bitmesi gerekir
    needs: test
    runs-on: ubuntu-latest
    # Sadece 'main' dalına push yapıldığında çalışır, pull request'lerde çalışmaz
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/viper:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/viper:${{ github.sha }}
