# .github/workflows/ci.yml

name: Python CI with SonarQube

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  PYTHON_VERSION: '3.9'
  PROJECT_VERSION: '1.0.0'

jobs:
  test-and-analyze:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository with full history
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --statistics || echo "Flake8 found style issues, but continuing..."

    - name: Check formatting with black
      run: |
        black --check --diff . || echo "Black found formatting issues, but continuing..."

    - name: Check imports with isort
      run: |
        isort --check --diff . || echo "Isort found import issues, but continuing..."

    - name: Security scan with bandit
      run: |
        bandit -r src/ || echo "Bandit found security issues, but continuing..."

    - name: Check dependencies with safety
      run: |
        safety check -r requirements.txt
      continue-on-error: true

    - name: Run tests and generate coverage report
      run: |
        pytest --cov=src --cov-report=xml tests/unit/

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.projectVersion=${{ env.PROJECT_VERSION }}
      continue-on-error: true

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true

  build-and-push:
    needs: test-and-analyze
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/viper:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/viper:${{ github.sha }}
